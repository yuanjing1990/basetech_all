#ØMQ: 理论基础

这个文章是SP工作组在2011年7月5日的讨论的一个贡献。

#目录
- 介绍
- 拓扑结构
- 传递流程
- 拓扑构建 vs 消息路由
- 消息模式
- 逐段传输 vs 端到端传输
- 名字解析
- 附录
	- 设计原则
	- 一致性原则
	- 扩展性原则
	- 插入性原则
- 结论
	
#介绍
不像其他（集中化）的有好理解的理论基础的消息系统，一般来说几乎没有多少可以指引感兴趣的读者了解分布式消息处理的资料，ØMQ尤其如此。
这篇文章就是去阐明ØMQ架构的基本概念，它们怎么组合在一起已经它们设计成这个样子的理由。

#拓扑结构
拓扑是ØMQ中最重要的概念。如果你不理解了“拓扑”的含义，其他的概念也会变得令人疑惑并且难以理解，即使是一些设计不当。

作为临时定义，我们可以说“拓扑”是参与业务逻辑同样方面的应用集合。

例如：想象有一个图像转换服务，用来缩放图像到目标尺寸和分辨率。所有提供这个转换服务的应用，所有使用这个服务的应用和所有的像负载平衡这样的中间节点，形成的就是拓扑。

技术上来讲，拓扑有下面的属性：
	1.拓扑是节点是应用，边是应用间数据通道的图
	2.所有应用在业务逻辑上有一致的线路协议
	3.这个图是紧凑的，任意两个节点要么直接相连要么通过一个或多个中介相连
	
第一点是非常明显的。有一点要指出的是，故意使用“通道”这个词而不是“链接”是为了表达一个事实，这个模型也适用于无连接的下层传输，比如IP多播或者UDP。

第二点说的是在拓扑中的所有应用需要在消息传递的内容（比如“这里有一个图片需要缩放”，或者“这是需要缩放的图片）、消息顺序（在应用中作为状态机实现）、数据实际的编码（图像是如何序列化的，RGB？CMYK）等上达成一致

第三点表达了这样一个事实，即使是两个具有同样业务逻辑的部署（在两个公司），它们也是两个拓扑，除非它们互相通过数据通道进行了连接。

为了直观的理解拓扑的概率，知道这个概念是很模糊的是很重要的。

这个模糊就像面向对象编程中的类的模糊一样。有正式的定义解释说类是数据成员和方法的集合，但是没有定义解释哪部分业务逻辑应该形成一个类，又是哪一部分不用。完全是由程序员来决定那个业务概念要被封装成类，哪个不用。程序员可能错误的把所有的业务逻辑放在单个的类中（实际上这已经避免了面向对象的设计），有或者错误的拆分这些逻辑到巨量的小类中（这会把程序转入到难以理解的相互依赖中）。

同样的道理，也没有一个单独的正确的方式来分割业务逻辑到拓扑结构中。唯一的经验法则就是拓扑是缩放的原子单元。你可以缩放整个拓扑，但是你不能只缩放它的一面。所以如果你可以预见你在未来有需要独立于功能B去扩展功能A的功能，你就应该单独为A和单独为B创建拓扑。

下面通过一个具体的例子来说明上面的内容：

在我们的图像变换应用中，里面有两个基本的功能：缩放图片和调整图像亮度。我们可以选择为两个功能创建一个拓扑，或者分割进”缩放“拓扑和”亮度调整“拓扑。
前一种情况中，我们会以下面的方式定义这个线性协议来传递我们感兴趣的功能：消息的第一字节为1表示缩放，为2表示亮度调整。我们也应该知道这个事实：这样的设计紧密的结合了这两个功能，如果未来我们想要添加更多的处理节点到这个拓扑中，它们每一个都应该能进行缩放或者亮度调整。
后一种情况中，这两个功能互不相关。在线性格式中也不用添加专用的类型字段，因为所有”缩放“拓扑的请求都是请求缩放图像，所有通过“亮度调整”拓扑传递的请求都是要求调整图像亮度。这样的设计可以独立与其他拓扑来扩展每一个拓扑。如果我们设计了专用的单目的的逻辑门阵列来缩放图片，我们只用简单的连接它们到“缩放”拓扑，对“亮度调整”拓扑没有影响。这样的安排可以从下面的图片中看出：

注意客户应用既可以请求图像缩放（通过拓扑A），也可以请求亮度调整（通过拓扑B）。工作者1只可以做图片缩放操作，工作者3只可以做亮度调整操作，但是工作者2两个服务都可以提供。

最后要注意的是，由于拓扑可以完全独立于其他拓扑的事实，拓扑可以映射到下层传输的一个属性，例如TCP端口。这允许下层网络根据商业标准规范它的行为。例如，通过特定的拓扑（特别的业务逻辑，例如缩放服务占用的宽带和亮度调整服务占用的宽带相反）可以测量占用的网络带宽，基于拓扑可以做流量整形，在消耗资源进行亮度调整时抑制图像缩放

传递流程
通常，


