函数模版
通过参数化类型信息来表示一个函数族
基本语法如下
template <class T>
type func(type,...)
{}
上面可以用typename代替class。
函数模版不会被编译成“能够处理任何类型的一个实体”，而是被编译成“多个实体，每个实体处理一个类型”。
函数模版在调用时会自动被具现化（根据调用参数来推导具现化类型），可以不用显式具现化。
模版函数会被编译两次：1、不具现化，只进行基本的语法检查。2、具现化，会检查函数调用是否合法有效。
上面的编译过程导致模版函数在调用时模版函数的定义需要可见。

参数推导时的结果需要完全符合模版函数的定义（不会自动进行类型转换），否则出错。
函数模版的模版参数不能定义预设值，可以显式指定具现化的类型。
显式指定的方法如下：func<type>(value,...),显示指定时靠后且可推导的参数不用显式指定;
函数模版的返回类型如果也被参数化了，自动推导参数不能推导其类型，此时需要显式指定。

模版函数也可以进行重载，重载方法与普通函数一致。
模版函数可以和同名的普通函数共存，调用时会优先选择非模版函数(非模块函数对于模板函数是可见的)，模版函数如果可以产生更好的匹配就会具现化模版函数。
可以强制使用模版函数来推导，语法如下：func<>(value,...)；需要类型转换时只会考虑普通函数。

类模板
定义类模板语法如下
template <class T>
class A{
 void op(T& t);
};
template <class T>
void A<T>::op(T& t)
{}
实现一个【移除最后元素并传回，而且完全异常安全的Pop是不可能的】
对模板类的成员函数来说，只有被调用了才会进行具现化，而静态函数会对每一个具现化的模板类实现
类模板特化语法如下
template<>
class A<type>{
 void op(type& t);
};
void A<type>::op(type& t)
{}
可以对类模板进行局部特化（偏特化），语法如下：
//类模板定义
template <class T1,class T2>
class A{
};
//类模板的偏特化
template <class T>
class A<T,T>{
};
template <class T>
class A<T,int>{
};
template <class T1,class T2>
class A<T1*,T2*>{
};
可以为类模板定义默认的模板参数，语法如下：
template <typename T, typename CONT = std::vector<T> >
class Stack{
};

在模板定义中使用非类型的模板参数
类模板中使用语法如下：
template <class T,int MAX_SIZE>
class Stack{
};
函数模板中使用语法如下：
template <class T,int VAL>
T add(T const& x)
{
 return x+VAL;
}
非类型的模板参数只可以是常数整数或者指向外部对象的指针

通常与某个template parameter相关的名称是个型别时，就必须加上关键字typename

.template只在模板中使用，当其前面是一个由模板参数决定的对象时

使用与模板相关的符号时，建议总是以this->或Base<T>::进行修饰，以免产生不确定性

模板类的成员也可以是模板，可以有嵌套的模板类（nested class）或者模板函数
模板函数写法如下：
template <class T>
class Stack
{
	template <class TS>
	void op();
};
template <class T>
template <class TS>
void Stack<T>::op(){}

模板参数也可以是模板
template <class T,template<typename> class CONT>
class Stack{};
模板函数的参数不可以是模板

模板中内部类型的局部变量初始化可以直接调用无参构造函数构造
如:int() == 0

以字面常量调用模板函数时，传递的参数非引用时字符常量数组才会退化为指针

程序生成时一般分为编译和链接，模板在调用的位置才进行实例化，所以在编译期间调用模板的地方必须知道模板的定义才能进行实例化，否则编译器认为模板实例化的代码在其他档案中，会只在调用模板的位置生成一个符号，等待链接阶段再和实例化的代码链接，但是目标文件中没有实例化的模板代码，导致编译错误
所以模板类定义时一般最好采用置入式模型，声明和定义写在一起



